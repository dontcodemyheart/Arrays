%include 'library.asm'

section .data
    ; arr массив с нулями и единицами
    arr dd 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    n dd 50             ; количество элементов в массиве arr

section .text
    global _start

_start:
    xor eax, eax        ; обнуление eax
    mov ecx, arr        ; указатель на начало массива

    mov ebx, arr        ; ebx указывает на массив
    mov eax, [n]        ; загрузка длины массива в eax
    dec eax             ; уменьшаем на единицу (n-1)
    imul eax, 4         ; умножаем на размер элемента (4 байта)
    add ebx, eax        ; перемещение указателя к последнему элементу массива
    xor eax, eax        ; обнуление eax для хранения результата
    mov edx, -1         ; edx = -1 (предыдущий элемент не определён)
    mov esi, 1          ; длина текущей последовательности
    mov edi, 1          ; максимальная длина последовательности
    jmp cycle1          ; переход к основному циклу

decrease_esi:
   mov esi, 1          ; сброс текущей длины последовательности
   jmp next            ; продолжаем цикл

cycle1:                ; основной цикл по элементам массива от конца к началу

    mov eax, [ebx]      ; загружаем текущее значение из массива в eax
    sub ebx, 4          ; переходим к предыдущему элементу массива
    cmp eax, edx        ; сравниваем текущий элемент с предыдущим
    jne decrease_esi    ; если они разные - сбрасываем текущую длину последовательности
    inc esi             ; если одинаковые - увеличиваем длину последовательности
    cmp esi, edi        ; сравниваем текущую длину с максимальной
    jle next            ; если текущая ≤ максимальной - продолжаем цикл
    inc edi             ; если больше - обновляем максимальную длину

next:
    mov edx, eax        ; сохраняем текущий элемент как предыдущий для следующей итерации
    cmp ebx, ecx        ; проверка на выход из цикла (сравнение адресов)
    jge cycle1          ; если ещё не дошли до начала массива - продолжаем цикл

    mov eax, edi        ; результат находится в edi
    call print_number   ; выводим результат на экран
    call exit           ; завершение программы
